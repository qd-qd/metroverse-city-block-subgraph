// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenID", Value.fromBigInt(BigInt.zero()));
    this.set("tokenURI", Value.fromString(""));
    this.set("externalURL", Value.fromString(""));
    this.set("uri", Value.fromString(""));
    this.set("image", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("description", Value.fromString(""));
    this.set("updatedAt", Value.fromBigInt(BigInt.zero()));
    this.set("owner", Value.fromString(""));
    this.set("totalScore", Value.fromI32(0));
    this.set("residentialScore", Value.fromI32(0));
    this.set("commercialScore", Value.fromI32(0));
    this.set("industrialScore", Value.fromI32(0));
    this.set("residentialBuildings", Value.fromI32(0));
    this.set("commercialBuildings", Value.fromI32(0));
    this.set("industrialBuildings", Value.fromI32(0));
    this.set("publicBuildings", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenID(): BigInt {
    let value = this.get("tokenID");
    return value!.toBigInt();
  }

  set tokenID(value: BigInt) {
    this.set("tokenID", Value.fromBigInt(value));
  }

  get tokenURI(): string {
    let value = this.get("tokenURI");
    return value!.toString();
  }

  set tokenURI(value: string) {
    this.set("tokenURI", Value.fromString(value));
  }

  get externalURL(): string {
    let value = this.get("externalURL");
    return value!.toString();
  }

  set externalURL(value: string) {
    this.set("externalURL", Value.fromString(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get image(): string {
    let value = this.get("image");
    return value!.toString();
  }

  set image(value: string) {
    this.set("image", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value!.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get totalScore(): i32 {
    let value = this.get("totalScore");
    return value!.toI32();
  }

  set totalScore(value: i32) {
    this.set("totalScore", Value.fromI32(value));
  }

  get residentialScore(): i32 {
    let value = this.get("residentialScore");
    return value!.toI32();
  }

  set residentialScore(value: i32) {
    this.set("residentialScore", Value.fromI32(value));
  }

  get commercialScore(): i32 {
    let value = this.get("commercialScore");
    return value!.toI32();
  }

  set commercialScore(value: i32) {
    this.set("commercialScore", Value.fromI32(value));
  }

  get industrialScore(): i32 {
    let value = this.get("industrialScore");
    return value!.toI32();
  }

  set industrialScore(value: i32) {
    this.set("industrialScore", Value.fromI32(value));
  }

  get residentialBuildings(): i32 {
    let value = this.get("residentialBuildings");
    return value!.toI32();
  }

  set residentialBuildings(value: i32) {
    this.set("residentialBuildings", Value.fromI32(value));
  }

  get commercialBuildings(): i32 {
    let value = this.get("commercialBuildings");
    return value!.toI32();
  }

  set commercialBuildings(value: i32) {
    this.set("commercialBuildings", Value.fromI32(value));
  }

  get industrialBuildings(): i32 {
    let value = this.get("industrialBuildings");
    return value!.toI32();
  }

  set industrialBuildings(value: i32) {
    this.set("industrialBuildings", Value.fromI32(value));
  }

  get publicBuildings(): i32 {
    let value = this.get("publicBuildings");
    return value!.toI32();
  }

  set publicBuildings(value: i32) {
    this.set("publicBuildings", Value.fromI32(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }
}
